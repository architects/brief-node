'use strict';

var util = require('util'),
    events = require('events'),
    commander = require('commander'),
    manifest = require('../../package.json'),
    string = require('underscore.string');

var Emitter = events.EventEmitter;
var Command = commander.Command;

var usage = '\n  Usage:\n';

function help() {
  console.log(usage);
}

var program = new Command(manifest.name).version(manifest.version).description(manifest.description);

program.on('--help', help);

function CLI(argv) {
  var self = this;

  self.cwd = process.cwd();

  Emitter.call(self);
}

function log() {
  if (!this.silent && !this.quiet) {
    this.stdout.apply(this.stdout, arguments);
  }
}

function stdout() {
  console.log.apply(console, arguments);
}

function stderr() {
  console.error.apply(console, arguments);
}

function usage() {
  return program.outputHelp();
}

util.inherits(CLI, Emitter);

CLI.prototype.stdout = stdout;
CLI.prototype.stderr = stderr;
CLI.prototype.log = log;
CLI.prototype.usage = usage;

module.exports = CLI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY2xpLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBSSxJQUFJLEdBQVUsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUM3QixNQUFNLEdBQVEsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUMvQixTQUFTLEdBQUssT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUNsQyxRQUFRLEdBQU0sT0FBTyxDQUFDLG9CQUFvQixDQUFDO0lBQzNDLE1BQU0sR0FBUSxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQTs7QUFFOUMsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQTtBQUNqQyxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFBOztBQUUvQixJQUFJLEtBQUssaUJBR1IsQ0FBQTs7QUFFRCxTQUFTLElBQUksR0FBRztBQUNkLFNBQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUE7Q0FDbkI7O0FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUNuQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUN6QixXQUFXLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBOztBQUV0QyxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQTs7QUFFMUIsU0FBUyxHQUFHLENBQUMsSUFBSSxFQUFFO0FBQ2pCLE1BQUksSUFBSSxHQUFHLElBQUksQ0FBQTs7QUFFZixNQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQTs7QUFFeEIsU0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtDQUNuQjs7QUFFRCxTQUFTLEdBQUcsR0FBRztBQUNiLE1BQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBQztBQUM3QixRQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0dBQzFDO0NBQ0Y7O0FBRUQsU0FBUyxNQUFNLEdBQUc7QUFDaEIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0NBQ3RDOztBQUVELFNBQVMsTUFBTSxHQUFHO0FBQ2hCLFNBQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtDQUN4Qzs7QUFFRCxTQUFTLEtBQUssR0FBRztBQUNmLFNBQU8sT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFBO0NBQzVCOztBQUVELElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFBOztBQUUzQixHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7QUFDN0IsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0FBQzdCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQTtBQUN2QixHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7O0FBRTNCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFBIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB1dGlsICAgICAgICA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBldmVudHMgICAgICA9IHJlcXVpcmUoJ2V2ZW50cycpLFxuICAgIGNvbW1hbmRlciAgID0gcmVxdWlyZSgnY29tbWFuZGVyJyksXG4gICAgbWFuaWZlc3QgICAgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKSxcbiAgICBzdHJpbmcgICAgICA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUuc3RyaW5nJylcblxudmFyIEVtaXR0ZXIgPSBldmVudHMuRXZlbnRFbWl0dGVyXG52YXIgQ29tbWFuZCA9IGNvbW1hbmRlci5Db21tYW5kXG5cbnZhciB1c2FnZSA9XG5gXG4gIFVzYWdlOlxuYFxuXG5mdW5jdGlvbiBoZWxwKCkge1xuICBjb25zb2xlLmxvZyh1c2FnZSlcbn1cblxudmFyIHByb2dyYW0gPSBuZXcgQ29tbWFuZChtYW5pZmVzdC5uYW1lKVxuICAgIC52ZXJzaW9uKG1hbmlmZXN0LnZlcnNpb24pXG4gICAgLmRlc2NyaXB0aW9uKG1hbmlmZXN0LmRlc2NyaXB0aW9uKVxuXG5wcm9ncmFtLm9uKCctLWhlbHAnLCBoZWxwKVxuXG5mdW5jdGlvbiBDTEkoYXJndikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBzZWxmLmN3ZCA9IHByb2Nlc3MuY3dkKClcblxuICBFbWl0dGVyLmNhbGwoc2VsZilcbn1cblxuZnVuY3Rpb24gbG9nKCkge1xuICBpZighdGhpcy5zaWxlbnQgJiYgIXRoaXMucXVpZXQpe1xuICAgIHRoaXMuc3Rkb3V0LmFwcGx5KHRoaXMuc3Rkb3V0LCBhcmd1bWVudHMpXG4gIH1cbn1cblxuZnVuY3Rpb24gc3Rkb3V0KCkge1xuICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHN0ZGVycigpIHtcbiAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHVzYWdlKCkge1xuICByZXR1cm4gcHJvZ3JhbS5vdXRwdXRIZWxwKClcbn1cblxudXRpbC5pbmhlcml0cyhDTEksIEVtaXR0ZXIpXG5cbkNMSS5wcm90b3R5cGUuc3Rkb3V0ID0gc3Rkb3V0XG5DTEkucHJvdG90eXBlLnN0ZGVyciA9IHN0ZGVyclxuQ0xJLnByb3RvdHlwZS5sb2cgPSBsb2dcbkNMSS5wcm90b3R5cGUudXNhZ2UgPSB1c2FnZVxuXG5tb2R1bGUuZXhwb3J0cyA9IENMSVxuIl19